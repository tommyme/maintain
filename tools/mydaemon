#!/usr/local/bin/python3
import os
import sys
import time
import atexit
from signal import SIGTERM
import asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pytz import timezone
from datetime import datetime

class BaseIPC:
    def __init__(self, pipe_path) -> None:
        self.pipe_path = pipe_path
        self.pipe_fd = -1
    
    def init_fd(self):
        if not os.path.exists(self.pipe_path):
            os.mkfifo(self.pipe_path)
        self.pipe_fd = os.open(self.pipe_path, os.O_RDONLY)
        print("init_fd", self.pipe_fd)
    
    def close_fd(self):
        os.close(self.pipe_fd)
        os.remove(self.pipe_path)
    
    def sleep(self):
        self._sleep()
    
    def _sleep(self):
        time.sleep(0.1)
    
    def recv_msg(self):
        while True:
            message = os.read(self.pipe_fd, 1024).decode().strip()
            if message == "quit":
                print("Received 'quit' message. Exiting...")
                break
            yield message
            self.sleep()

    def parse_msg(self, msg):
        if msg == 'hello':
            sys_notice("hello", "mydaemon")
    
    def recv_parse(self):
        print("recv_parse")
        self.init_fd()
        for msg in self.recv_msg():
            self.parse_msg(msg)
        self.close_fd()

class AsyncIPC(BaseIPC):
    def __init__(self, pipe_path) -> None:
        super().__init__(pipe_path)
        self.loop = asyncio.get_event_loop()

    async def recv_msg(self):
        while True:
            message = os.read(self.pipe_fd, 1024).decode().strip()
            if message == "quit":
                print("Received 'quit' message. Exiting...")
                break
            yield message
            await self._sleep()

    async def recv_parse(self):
        print("recv_parse")
        self.init_fd()
        async for msg in self.recv_msg():
            if msg == "":
                continue
            print(msg, type(msg))
            self.parse_msg(msg)
        self.close_fd()

    async def _sleep(self):
        await asyncio.sleep(0.1)

class BaseDaemon:
    """
    A generic daemon class.
    """

    def __init__(self, pidfile, ipc):
        self.pidfile = pidfile
        self.ipc:BaseIPC = ipc

    def daemonize(self):
        """
        Daemonize class. UNIX double fork mechanism.
        """

        try:
            pid = os.fork()
            if pid > 0:
                print("1st fork, exit")
                # Exit first parent
                sys.exit(0)
        except OSError as e:
            sys.stderr.write("fork #1 failed: %d (%s)\n" % (e.errno, e.strerror))
            sys.exit(1)
        print("1st forked process, env setup")
        # Decouple from parent environment
        os.chdir("/")
        os.setsid()
        os.umask(0)

        # Do second fork
        try:
            pid = os.fork()
            if pid > 0:
                print("2nd fork, exit")
                # Exit from second parent
                sys.exit(0)
        except OSError as e:
            sys.stderr.write("fork #2 failed: %d (%s)\n" % (e.errno, e.strerror))
            sys.exit(1)

        print("2nd forked process")
        # Redirect standard file descriptors
        # sys.stdout.flush()
        # sys.stderr.flush()
        # si = open(os.devnull, 'r')
        # so = open(os.devnull, 'a+')
        # se = open(os.devnull, 'a+')
        # os.dup2(si.fileno(), sys.stdin.fileno())
        # os.dup2(so.fileno(), sys.stdout.fileno())
        # os.dup2(se.fileno(), sys.stderr.fileno())

        # Write pidfile
        print("write pid file")
        atexit.register(self.delpid)
        pid = str(os.getpid())
        print("self pid", pid)
        with open(self.pidfile,'w+') as f:
            f.write("%s\n" % pid)

    def delpid(self):
        print("del pid")
        os.remove(self.pidfile)

    def start(self):
        """
        Start the daemon
        """

        # Check for a pidfile to see if the daemon already runs
        try:
            with open(self.pidfile,'r') as pf:
                pid = int(pf.read().strip())
        except IOError:
            pid = None
        print("pid:", pid)

        if pid:
            message = "pidfile %s already exists. Daemon already running?\n"
            sys.stderr.write(message % self.pidfile)
            sys.exit(1)

        # Start the daemon
        self.daemonize()
        self.run()

    def stop(self):
        """
        Stop the daemon
        """

        # Get the pid from the pidfile
        try:
            with open(self.pidfile,'r') as pf:
                pid = int(pf.read().strip())
        except IOError:
            pid = None

        if not pid:
            message = "pidfile %s does not exist. Daemon not running?\n"
            sys.stderr.write(message % self.pidfile)
            return # not an error in a restart

        # Try killing the daemon process    
        try:
            while True:
                os.kill(pid, SIGTERM)
                time.sleep(0.1)
        except OSError as e:
            err = str(e.args)
            if err.find("No such process") > 0:
                if os.path.exists(self.pidfile):
                    os.remove(self.pidfile)
            else:
                print(str(e.args))
                sys.exit(1)

    def restart(self):
        self.stop()
        self.start()

    def _run(self):
        self.ipc.recv_parse()

    def run(self):
        self._run()
    
class FuncDaemon(BaseDaemon):
    def __init__(self, pidfile, ipcFactory):
        self.pidfile = pidfile
        self.ipcFactory = ipcFactory
        self.ipc:AsyncIPC
        self.scheduler: AsyncIOScheduler

    async def sleep_check(self):
        f = os.popen("pmset -g | grep SleepDisabled")
        content = f.read()
        f.close()
        if '1' in content:  # sleep enabled
            sys_notice("sleep enabled", "mydaemon cron")
            os.system("sudo pmset -a displaysleep 10;sudo pmset -b sleep 1; sudo pmset -b disablesleep 0")
        else:
            sys_notice("sleep not disabled", "mydaemon cron")


    def run(self):
        self.ipc = self.ipcFactory('/tmp/mydaemon_pipe')
        self.loop = self.ipc.loop
        self.loop.run_until_complete(self._run())
    
    async def _run(self):
        self.scheduler = AsyncIOScheduler(timezone=timezone('Asia/Shanghai'))
        self.scheduler.add_job(self.sleep_check, "cron", hour=1, minute=20)
        self.scheduler.start()
        
        await self.ipc.recv_parse()

def sys_notice(title, tip):
    cmd = "/usr/bin/osascript -e 'display notification \"{}\" with title \"{}\"'".format(tip, title)
    os.system(cmd)


if __name__ == '__main__':
    # some_ipc = AsyncIPC('/tmp/mydaemon_pipe')
    some_daemon = FuncDaemon('/var/run/mydaemon.pid', AsyncIPC)
    some_daemon.start()